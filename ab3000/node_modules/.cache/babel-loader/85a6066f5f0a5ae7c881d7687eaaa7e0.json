{"ast":null,"code":"import { toPathString } from \"./svg.js\";\nimport { polygonCentroid as d3Centroid } from \"d3-polygon\";\nexport function distance(a, b) {\n  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\n}\nexport function pointAlong(a, b, pct) {\n  return [a[0] + (b[0] - a[0]) * pct, a[1] + (b[1] - a[1]) * pct];\n}\nexport function samePoint(a, b) {\n  return distance(a, b) < 1e-9;\n}\nexport function interpolatePoints(a, b, string) {\n  let interpolators = a.map((d, i) => interpolatePoint(d, b[i]));\n  return function (t) {\n    let values = interpolators.map(fn => fn(t));\n    return string ? toPathString(values) : values;\n  };\n}\nexport function interpolatePoint(a, b) {\n  return function (t) {\n    return a.map((d, i) => d + t * (b[i] - d));\n  };\n}\nexport function isFiniteNumber(number) {\n  return typeof number === \"number\" && isFinite(number);\n} // Use plain mean if it's a degenerate polygon (colinear points or single point)\n\nexport function polygonCentroid(polygon) {\n  return nonZeroArea(polygon) ? d3Centroid(polygon) : [(polygon[0][0] + polygon[polygon.length - 1][0]) / 2, (polygon[0][1] + polygon[polygon.length - 1][1]) / 2];\n}\n\nfunction nonZeroArea(polygon) {\n  for (let i = 0; i < polygon.length - 2; i++) {\n    let a = polygon[i],\n        b = polygon[i + 1],\n        c = polygon[i + 2];\n\n    if (a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}