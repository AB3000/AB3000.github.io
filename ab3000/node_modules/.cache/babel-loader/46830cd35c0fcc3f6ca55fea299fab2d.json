{"ast":null,"code":"import { polygonLength } from \"d3-polygon\";\nimport { distance, pointAlong } from \"./math.js\";\nexport function addPoints(ring, numPoints) {\n  const desiredLength = ring.length + numPoints,\n        step = polygonLength(ring) / numPoints;\n  let i = 0,\n      cursor = 0,\n      insertAt = step / 2;\n\n  while (ring.length < desiredLength) {\n    let a = ring[i],\n        b = ring[(i + 1) % ring.length],\n        segment = distance(a, b);\n\n    if (insertAt <= cursor + segment) {\n      ring.splice(i + 1, 0, segment ? pointAlong(a, b, (insertAt - cursor) / segment) : a.slice(0));\n      insertAt += step;\n      continue;\n    }\n\n    cursor += segment;\n    i++;\n  }\n}\nexport function bisect(ring, maxSegmentLength = Infinity) {\n  for (let i = 0; i < ring.length; i++) {\n    let a = ring[i],\n        b = i === ring.length - 1 ? ring[0] : ring[i + 1]; // Could splice the whole set for a segment instead, but a bit messy\n\n    while (distance(a, b) > maxSegmentLength) {\n      b = pointAlong(a, b, 0.5);\n      ring.splice(i + 1, 0, b);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}