{"ast":null,"code":"import { polygonCentroid, distance } from \"./math.js\"; // With 8 or fewer shapes, find the best permutation\n// Skip if array is huge (9+ shapes)\n\nexport default function (start, end) {\n  if (start.length > 8) {\n    return start.map((d, i) => i);\n  }\n\n  let distances = start.map(p1 => end.map(p2 => squaredDistance(p1, p2)));\n  return bestOrder(start, end, distances);\n}\nexport function bestOrder(start, end, distances) {\n  let min = Infinity,\n      best = start.map((d, i) => i);\n\n  function permute(arr, order = [], sum = 0) {\n    for (let i = 0; i < arr.length; i++) {\n      let cur = arr.splice(i, 1),\n          dist = distances[cur[0]][order.length];\n\n      if (sum + dist < min) {\n        if (arr.length) {\n          permute(arr.slice(), order.concat(cur), sum + dist);\n        } else {\n          min = sum + dist;\n          best = order.concat(cur);\n        }\n      }\n\n      if (arr.length) {\n        arr.splice(i, 0, cur[0]);\n      }\n    }\n  }\n\n  permute(best);\n  return best;\n}\n\nfunction squaredDistance(p1, p2) {\n  let d = distance(polygonCentroid(p1), polygonCentroid(p2));\n  return d * d;\n}","map":null,"metadata":{},"sourceType":"module"}